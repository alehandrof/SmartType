[
	/*** Smart Double Quotes (“”) ***/
	// Surround selection with smart quotes // OK, I think
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "“${0:$SELECTION}”"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Auto-pair smart quotes // OK -- but what about following/preceding regexs?
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "“$0”"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|”|;|\\}|$)", "match_all": true }, // does commenting it out alter anything?
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Smart quote before word
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "“$0"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\S", "match_all": true },
			// { "key": "following_text", "operator": "not_regex_contains", "operand": "^(“|”|‘|’|\\)|])", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Smart quote after word
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "”$0"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\S$", "match_all": true },
			// { "key": "following_text", "operator": "not_regex_contains", "operand": "^(“|”|‘|’|\\)|])", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Do not overwrite smart quotes with dumb quotes // OK, I think
	{ "keys": ["\""], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(“|”)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "“$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^”", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	/*** Smart Single Quotes (‘’) ***/
	// Surround selection with smart quotes // OK, I think
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "‘${0:$SELECTION}’"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Auto-pair smart quotes // OK -- but what about following/preceding regexs?
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "‘$0’"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			// { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|’|;|\\}|$)", "match_all": true }, // does commenting it out alter anything?
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Smart quote before word
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "‘$0"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\S", "match_all": true },
			{ "key": "following_text", "operator": "not_regex_contains", "operand": "^(”)", "match_all": true },
			// { "key": "following_text", "operator": "not_regex_contains", "operand": "^(“|”|‘|’|\\)|])", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Smart quote after word
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "’$0"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\S$", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(“|‘)$", "match_all": true },
			// { "key": "following_text", "operator": "not_regex_contains", "operand": "^(“|”|‘|’|\\)|])", "match_all": true },
			// { "key": "following_text", "operator": "not_regex_contains", "operand": "^(“|‘|’|\\)|])", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	// Do not overwrite smart quotes with dumb quotes // OK, I think
	{ "keys": ["'"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(‘|’)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "‘$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^’", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text", "match_all": true }
		]
	}
]